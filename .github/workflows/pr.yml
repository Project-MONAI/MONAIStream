# Copyright 2021 MONAI Consortium
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NVCR_REGISTRY: nvcr.io

jobs:
  docker_build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      monaistream_docker_image_tag: ${{ steps.findPr.outputs.pr }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - uses: jwalton/gh-find-current-pr@v1
        id: findPr
        with:
          state: all

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3.5.0
        with:
          images: aihsani/monaistream:${{ steps.findPr.outputs.pr }}

      - name: Check if Docker Image with Tag Exists
        id: docker_build_check
        run: |

          if docker manifest inspect "aihsani/monaistream:${{ steps.findPr.outputs.pr }}"; then
            echo "::set-output name=skip_docker_build::true"
          else
            echo "::set-output name=skip_docker_build::false"
          fi

      - name: Login to NGC Repo
        if: steps.docker_build_check.outputs.skip_docker_build == 'false'
        uses: docker/login-action@v1.10.0
        with:
          registry: ${{ env.NVCR_REGISTRY }}
          username: ${{ secrets.NGC_USER }}
          password: ${{ secrets.NGC_TOKEN }}

      - name: Build and Push MONAI SDK Development Docker Image
        if: steps.docker_build_check.outputs.skip_docker_build == 'false'
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          push: true
          tags: aihsani/monaistream:${{ steps.findPr.outputs.pr }}
          labels: ${{ steps.meta.outputs.labels }}
          file: Dockerfile.base

  build:
    needs: docker_build
    runs-on: ubuntu-latest
    container:
      image: "docker://aihsani/monaistream:${{ needs.docker_build.outputs.monaistream_docker_image_tag }}"
      credentials:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Install PyDS Library
        run: |
          cp ./lib/pyds-py3.8-x86.so /opt/nvidia/deepstream/deepstream-6.0/lib/pyds.so
          pushd /opt/nvidia/deepstream/deepstream-6.0/lib
          python setup.py install
          popd

      - name: Install MONAIStream Requirements
        run: |
          python -m pip install -r requirements-dev.txt

      - name: Clean
        run: |
          ./runtests.sh --clean

      - name: ISort
        run: |
          ./runtests.sh --isort

      - name: Black
        run: |
          ./runtests.sh --black

      - name: Flake8
        run: |
          ./runtests.sh --flake8

      - name: PyType
        run: |
          ./runtests.sh --pytype

      - name: MyPy
        run: |
          ./runtests.sh --mypy

  build_agx:
    runs-on: agx

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python3 -m pip install -r requirements-dev.txt

      - name: Unit Tests
        run: |
          ./runtests.sh --unittests --coverage

      - name: Coverage
        run: |
          coverage xml

      - name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
          file: ./coverage.xml

  packaging:
    needs: docker_build
    runs-on: ubuntu-latest
    container:
      image: "docker://aihsani/monaistream:${{ needs.docker_build.outputs.monaistream_docker_image_tag }}"
      credentials:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Install PyDS Library
        run: |
          cp ./lib/pyds-py3.8-x86.so /opt/nvidia/deepstream/deepstream-6.0/lib/pyds.so
          pushd /opt/nvidia/deepstream/deepstream-6.0/lib
          python setup.py install
          popd

      - name: Install MONAIStream Requirements
        run: |
          python -m pip install -r requirements-dev.txt

      - name: cache weekly timestamp
        id: pip-cache
        run: |
          echo "::set-output name=datew::$(date '+%Y-%V')"

      - name: cache for pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}

      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade pip setuptools wheel twine
          python -m pip install torch>=1.8 torchvision

      - name: Test source archive and wheel file
        run: |
          root_dir=$PWD
          echo "$root_dir"

          # build tar.gz and wheel
          python setup.py check -m -s
          python setup.py sdist bdist_wheel
          python -m twine check dist/*

          # move packages to a temp dir
          tmp_dir=$(mktemp -d)
          cp dist/monaistream* "$tmp_dir"
          rm -r build dist src/monaistream.egg-info
          cd "$tmp_dir"
          ls -al

          # install from wheel
          python -m pip install monaistream*.whl
          python -c 'import monaistream; monaistream.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monaistream; print(monaistream.__file__)'
          python -m pip uninstall -y monaistream
          rm monaistream*.whl

          # install from tar.gz
          name=$(ls *.tar.gz | head -n1)
          echo $name
          python -m pip install $name
          python -c 'import monaistream; monaistream.print_config()' 2>&1 | grep -iv "unknown"
          python -c 'import monaistream; print(monaistream.__file__)'

        env:
          shell: bash

  build-docs:
    needs: docker_build
    runs-on: ubuntu-latest
    container:
      image: "docker://aihsani/monaistream:${{ needs.docker_build.outputs.monaistream_docker_image_tag }}"
      credentials:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_TOKEN }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2

      - name: Install PyDS Library
        run: |
          cp ./lib/pyds-py3.8-x86.so /opt/nvidia/deepstream/deepstream-6.0/lib/pyds.so
          pushd /opt/nvidia/deepstream/deepstream-6.0/lib
          python setup.py install
          popd

      - name: cache weekly timestamp
        id: pip-cache
        run: |
          echo "::set-output name=datew::$(date '+%Y-%V')"

      - name: cache for pip
        uses: actions/cache@v2
        id: cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r docs/requirements.txt

      - name: Make html
        run: |
          export PYTHONPATH=$(pwd)/src
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/compat/lib.real
          cd docs/
          make clean
          make html 2>&1 | tee tmp_log
          if [[ $(grep -c "WARNING:" tmp_log) != 0 ]]; then echo "found warnings"; grep "WARNING:" tmp_log; exit 1; fi
        shell: bash
